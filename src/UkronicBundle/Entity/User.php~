<?php

namespace UkronicBundle\Entity;

use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

/**
 * @ORM\Entity
 * @ORM\Table(name="fos_user")
 * @Vich\Uploadable
 */
class User extends BaseUser
{
    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @ORM\OneToMany(targetEntity="Decrypt", mappedBy="user")
     */
    private $decrypts;

    /**
     * @ORM\OneToMany(targetEntity="Rating", mappedBy="user")
     */
    private $ratings;

    /**
     * @ORM\OneToMany(targetEntity="Histo", mappedBy="user")
     */
    private $histos;

    /**
     * @ORM\OneToMany(targetEntity="Beloved", mappedBy="user")
     */
    private $likes;

    /**
     * @ORM\OneToMany(targetEntity="Comment", mappedBy="user")
     */
    private $comments;

    /**
     * NOTE: This is not a mapped field of entity metadata, just a simple property.
     * 
     * @Vich\UploadableField(mapping="user_image", fileNameProperty="imageName")
     * 
     * @var File
     */
    private $imageFile;

    /**
     * @ORM\Column(type="string", length=255)
     *
     * @var string
     */
    private $imageName;

    /**
     * @ORM\Column(type="datetime")
     *
     * @var \DateTime
     */
    private $updatedAt;

    /**
     * If manually uploading a file (i.e. not using Symfony Form) ensure an instance
     * of 'UploadedFile' is injected into this setter to trigger the  update. If this
     * bundle's configuration parameter 'inject_on_load' is set to 'true' this setter
     * must be able to accept an instance of 'File' as the bundle will inject one here
     * during Doctrine hydration.
     *
     * @param File|\Symfony\Component\HttpFoundation\File\UploadedFile $image
     *
     * @return Product
     */
    public function setImageFile(File $image = null)
    {
        $this->imageFile = $image;

        if ($image) {
            // It is required that at least one field changes if you are using doctrine
            // otherwise the event listeners won't be called and the file is lost
            $this->updatedAt = new \DateTimeImmutable();
        }

        return $this;
    }

    /**
     * @return File|null
     */
    public function getImageFile()
    {
        return $this->imageFile;
    }

    /**
     * @param string $imageName
     *
     * @return Product
     */
    public function setImageName($imageName)
    {
        $this->imageName = $imageName;

        return $this;
    }

    /**
     * @return string|null
     */
    public function getImageName()
    {
        return $this->imageName;
    }

    public function __construct()
    {
        parent::__construct();
        // your own logic
        $this->decrypts = new ArrayCollection();
        $this->ratings = new ArrayCollection();
        $this->histos = new ArrayCollection();
        $this->likes = new ArrayCollection();
        $this->comments = new ArrayCollection();
    }

    /**
     * Add decrypt
     *
     * @param \UkronicBundle\Entity\Decrypt $decrypt
     *
     * @return User
     */
    public function addDecrypt(\UkronicBundle\Entity\Decrypt $decrypt)
    {
        $this->decrypts[] = $decrypt;


        return $this;
    }

    /**
     * Remove decrypt
     *
     * @param \UkronicBundle\Entity\Decrypt $decrypt
     */
    public function removeDecrypt(\UkronicBundle\Entity\Decrypt $decrypt)
    {
        $this->decrypts->removeElement($decrypt);
    }

    /**
     * Get decrypts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getDecrypts()
    {
        return $this->decrypts;
    }

    /**
     * Add rating
     *
     * @param \UkronicBundle\Entity\Rating $rating
     *
     * @return User
     */
    public function addRating(\UkronicBundle\Entity\Rating $rating)
    {
        $this->ratings[] = $rating;

        return $this;
    }

    /**
     * Remove rating
     *
     * @param \UkronicBundle\Entity\Rating $rating
     */
    public function removeRating(\UkronicBundle\Entity\Rating $rating)
    {
        $this->ratings->removeElement($rating);
    }

    /**
     * Get ratings
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getRatings()
    {
        return $this->ratings;
    }
}
